# optimize -O2
CFLAGS+=" -O2"

# The fortify compiler option cause the build to fail
bad_flags -D_FORTIFY_SOURCE=2 &&

mkdir -p $SOURCE_DIRECTORY/tmp &&

export CC_OPTS=( Pipe ) &&

if [ -n "$MAKES" ] && [ "$MAKES" -gt 1 ]; then
  sedit "s/# PARALLELMFLAGS = -j 4/PARALLELMFLAGS = -j $MAKES/" Makefile.in
fi &&

export CC=gcc &&

# Don't fully strip libc
if [[ "$LDFLAGS" == *-s* ]]; then
  STRIP=y
fi &&
unset LDFLAGS &&

INSTALL_ROOT=$SOURCE_DIRECTORY/glibcroot &&
mkdir -p $INSTALL_ROOT &&
cd $INSTALL_ROOT &&

OPTS+=" --libdir=/usr/lib \
        --sbindir=/usr/bin \
        --exec-prefix=/usr"

../configure --prefix=/usr             \
             --infodir=/usr/share/info \
             --mandir=/usr/share/man   \
             --host=$BUILD             \
             --build=$BUILD            \
             --with-bugurl=https://github.com/lunar-linux/moonbase-core/issues \
             --with-headers=/usr/include \
             --with-elf                \
             --without-gd              \
             --without-cvs             \
             --with-__thread           \
             --with-tls                \
             --enable-cet              \
             --enable-shared           \
             --enable-add-ons          \
             --enable-bind-now         \
             --enable-bind-now         \
             --enable-lock-elision     \
             --enable-stack-protector=strong \
             --enable-stackguard-randomization \
             --disable-timezone-tools  \
             --disable-multi-arch      \
             --disable-profile         \
             --disable-werror          \
             $OPTS &&

#             --enable-obsolete-rpc     \
#             --enable-obsolete-nsl     \
 
# build libraries with hardening disabled
echo "build-programs=no" >> configparms &&
make &&

# Re-enable hardening
sedit '/build-programs=/s;no;yes;'   configparms &&
echo "CC  += -D_FORTIFY_SOURCE=2" >> configparms &&
echo "CXX += -D_FORTIFY_SOURCE=2" >> configparms &&
make &&

# Preserve the old glibc temporarily
LD=/usr/lib/ld-linux-x86-64.so.2 &&
GLIBC=/usr/lib/libc.so.6         &&
DL=/usr/lib/libdl.so.2           &&
M=/usr/lib/libm.so.6             &&
RT=/usr/lib/librt.so.1           &&
PTHREAD=/usr/lib/libpthread.so.0 &&
NSS=/usr/lib/libnss_files.so.2   &&
UTIL=/usr/lib/libutil.so.1       &&
NSL=/usr/lib/libnsl.so.1         &&
CRYPT=/usr/lib/libcrypt.so.1     &&
MVEC=/usr/lib/libmvec.so.1       &&

cp $LD /usr/lib/ld-lunar.so              &&
cp $GLIBC /usr/lib/libc-lunar.so         &&
cp $DL /usr/lib/libdl-lunar.so           &&
cp $M /usr/lib/libm-lunar.so             &&
cp $RT /usr/lib/librt-lunar.so           &&
cp $PTHREAD /usr/lib/libpthread-lunar.so &&
cp $NSS /usr/lib/libnss_files-lunar.so   &&
cp $UTIL /usr/lib/libutil-lunar.so       &&
cp $NSL /usr/lib/libnsl-lunar.so         &&
cp $CRYPT /usr/lib/libcrypt-lunar.so     &&
cp $MVEC /usr/lib/libmvec-lunar.so

# Setup links for libraries
sln /usr/lib/ld-lunar.so $LD              &&
sln /usr/lib/libc-lunar.so $GLIBC         &&
sln /usr/lib/libdl-lunar.so $DL           &&
sln /usr/lib/libm-lunar.so $M             &&
sln /usr/lib/librt-lunar.so $RT           &&
sln /usr/lib/libpthread-lunar.so $PTHREAD &&
sln /usr/lib/libnss_files-lunar.so $NSS   &&
sln /usr/lib/libutil-lunar.so $UTIL       &&
sln /usr/lib/libnsl-lunar.so $NSL         &&
sln /usr/lib/libcrypt-lunar.so $CRYPT     &&
sln /usr/lib/libmvec-lunar.so $MVEC

# clean hack to make sure gnu/stubs.h gets refreshed
rm -f /usr/include/gnu/stubs.h &&
exit 1
# This removes the old glibc
prepare_install &&

# And now we install the new glibc
make install &&

# Now optionally perform debug symbol stripping only
if [ "$STRIP" == "y" ] ; then
  for FN in ld-$MAJOR.so \
      lib{anl,BrokenLocale,c,crypt,dl,m,nsl,util,pthread,resolv}-$MAJOR.so \
      libnss_{compat,files,hesiod,nis,nisplus}-$MAJOR.so \
      lib{memusage,pcprofile,SegFault,thread_db-1.0}.so; do
    strip -S /usr/lib/$FN
  done &&
  for FN in "/usr/lib/gconv/*.so"; do
    strip -S $FN
  done
fi &&

# Rebuild the ld cache
rm -f /etc/ld.so.cache 2>/dev/null &&
ldconfig &&

# Remove the temporary libc
rm /usr/lib/{ld,lib{c,dl,m,rt,pthread,nss_files,util,nsl,crypt,mvec}}-lunar.so &&

if [ ! -e /etc/nscd.conf ]; then
  install -m644 $SOURCE_DIRECTORY/nscd/nscd.conf /etc/nscd.conf
fi &&
if [ ! -e /etc/gai.conf ]; then
  install -m644 $SOURCE_DIRECTORY/posix/gai.conf /etc/gai.conf
fi &&

# Generate locale info
if [ -z "$GLIBC_LOCALES" ]; then
  make localedata/install-locales
else
  devoke_installwatch &&
  for LOCALE in $GLIBC_LOCALES; do
    INPUTFILE=$(echo $LOCALE | cut -d/ -f1 | sed -e 's:\..*$::g') &&
    OUTPUTFILE=$(echo $LOCALE | cut -d/ -f1) &&
    CHARMAP=$(echo  $LOCALE | cut -d/ -f2)   &&
    mkdir -p /usr/lib/locale/$OUTPUTFILE     &&
    echo "localedef -i $INPUTFILE -f $CHARMAP $OUTPUTFILE" &&
    localedef -i $INPUTFILE -f $CHARMAP $OUTPUTFILE
  done &&
  invoke_installwatch &&
  touch /usr/lib/locale/locale-archive
fi &&

# Touch undetected symlinks
touch -c -h $LD $GLIBC $DL $M $RT $PTHREAD $NSS $UTIL $NSL $CRYPT $MVEC /usr/lib/lib{BrokenLocale.so.1,anl.so.1,nss_compat.so.2,nss_db.so.2,nss_dns.so.2,nss_hesiod.so.2,nss_nis.so.2,nss_nisplus.so.2,resolv.so.2,thread_db.so.1} &&
touch -c -h /usr/lib/lib{BrokenLocale,anl,crypt,dl,m,nsl,nss_compat,nss_db,nss_dns,nss_files,nss_hesiod,nss_nis,nss_nisplus,resolv,rt,thread_db,util}.so &&

ldconfig &&

# glibc 2.26 have removed xlocale.h. Some modules need it.
ln -sf /usr/include/locale.h /usr/include/xlocale.h
